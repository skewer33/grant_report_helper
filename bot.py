import logging
import os
import re
import json
import pandas as pd
from functools import wraps
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from aiogram.client.default import DefaultBotProperties
import yadisk
import posixpath


# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
load_dotenv(".env")
API_TOKEN = os.getenv('API_TOKEN')
YANDEX_TOKEN = os.getenv('YANDEX_TOKEN')
AUTHORIZED_USERS_FILE = "authorized_users.txt"
YADISK_HOME_PATH = os.getenv('YADISK_HOME_PATH')
TEMPLATE_STATE_FILE = "current_template.json"

# –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
TEMPLATES_FOLDER = os.path.join(YADISK_HOME_PATH, "–®–∞–±–ª–æ–Ω—ã")
# –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
REPORT_FOLDER = os.path.join(YADISK_HOME_PATH, "–î–æ–∫—É–º–µ–Ω—Ç—ã")
# –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
LOG_FILE = os.path.join(os.path.dirname(__file__), 'logs.txt')
# –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Ö—Ä–∞–Ω—è—â–µ–π –®–∞–±–ª–æ–Ω—ã
LOCAL_TEMPLATES_FOLDER = os.path.join(os.getcwd(), "Templates")
os.makedirs(LOCAL_TEMPLATES_FOLDER, exist_ok=True)
# json —Ç–∞–±–ª–∏—Ü–∞, —Ö—Ä–∞–Ω—è—â–∞—è –∏–Ω—Ñ—É –æ —é–∑–µ—Ä–∞—Ö –∏ –∏–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–∏ —à–∞–±–ª–æ–Ω–∞—Ö
USER_TEMPLATES_FILE = "user_templates.json"

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ï–†–ê ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
yadisk_client = yadisk.YaDisk(token=YANDEX_TOKEN)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def is_authorized(user_id: int) -> bool:
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    try:
        with open(AUTHORIZED_USERS_FILE, "r") as f:
            return str(user_id) in f.read()
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª authorized_users.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def require_authorization(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = message.from_user.id
        if not is_authorized(user_id):
            await message.answer("\u274C –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# –†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
def get_local_template_path(template_name: str) -> str:
    '''
    –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ —à–∞–±–ª–æ–Ω–∞
    '''
    return os.path.join(LOCAL_TEMPLATES_FOLDER, template_name)


def ensure_local_template(template_name: str):
    '''
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    '''
    local_path = get_local_template_path(template_name)
    if not os.path.exists(local_path):
        yadisk_client.download(posixpath.join(TEMPLATES_FOLDER, template_name), local_path)
        logger.info(f"–®–∞–±–ª–æ–Ω {template_name} —Å–∫–∞—á–∞–Ω –≤ {local_path}")
    else:
        logger.info(f"–®–∞–±–ª–æ–Ω {template_name} —É–∂–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ")
    return local_path


def load_user_templates() -> dict:
    '''
    –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞. –°–º–æ—Ç—Ä–∏—Ç, –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —à–∞–±–ª–æ–Ω–æ–º —Ä–∞–Ω–µ–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ
    '''
    if not os.path.exists(USER_TEMPLATES_FILE):
        return {}
    with open(USER_TEMPLATES_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_user_templates(user_templates: dict):
    '''
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ —à–∞–±–ª–æ–Ω–µ, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —é–∑–µ—Ä
    '''
    with open(USER_TEMPLATES_FILE, "w", encoding="utf-8") as f:
        json.dump(user_templates, f, ensure_ascii=False, indent=2)

def set_user_template(user_id: int, template_name: str):
    '''
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    user_templates = load_user_templates()
    user_templates[str(user_id)] = template_name
    save_user_templates(user_templates)

def get_user_template(user_id: int) -> str | None:
    '''
    –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    user_templates = load_user_templates()
    return user_templates.get(str(user_id))

def get_savedir(user_id: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–∞–ø–∫–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ '–®–∞–±–ª–æ–Ω_'
    """
    template_name = get_user_template(user_id)
    if not template_name:
        logger.warning(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return None
    return template_name.removeprefix('–®–∞–±–ª–æ–Ω_')

def get_template_names():
    return [f['name'] for f in yadisk_client.listdir(TEMPLATES_FOLDER) if f['path'].endswith(".xlsx")]

def get_template_dataframe(name: str) -> pd.DataFrame:
    '''
    –ü–æ–ª—É—á–∞–µ–º dataframe —à–∞–±–ª–æ–Ω–∞
    '''
    local_path = get_local_template_path(name)
    return pd.read_excel(local_path)

# –†–ê–ë–û–¢–ê –° –ö–õ–ê–í–ò–ê–¢–£–†–û–ô
def build_reply_keyboard(options: list[str]) -> ReplyKeyboardMarkup:
    options.append("üîô –ù–∞–∑–∞–¥")
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=opt)] for opt in options],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò
def get_unique_filename(folder_path: str, filename: str) -> str:
    '''
    –°–¥–µ–ª–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –¥–æ–±–∞–≤–∏–≤ _index –Ω–∞ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    '''
    base, ext = os.path.splitext(filename)
    index = 1
    candidate = f"{base}{ext}"
    while yadisk_client.exists(posixpath.join(folder_path, candidate)):
        candidate = f"{base}_{index}{ext}"
        index += 1
    return candidate

async def create_file_public_url(path):
    '''
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª –ø–æ –µ–≥–æ –ø—É—Ç–∏ –Ω–∞ –Ø.–î–∏—Å–∫–µ
    '''
    meta = yadisk_client.get_meta(path)
    attempts = 5
    waiting_times = [(i+1)**2 - (i) for i in range(attempts)]
    public_url = None
    for i in range(attempts):
        meta = yadisk_client.get_meta(path)
        public_url = meta.public_url if hasattr(meta, "public_url") and meta.public_url else None
        if public_url:
            break
        logger.info(f"URL isn`t exist, sleeping {waiting_times[i]} seconds and try again")
        await asyncio.sleep(waiting_times[i])
    if not public_url:
        public_url = "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n–í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–æ–π —Ñ–∞–π–ª —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
    return public_url

async def processing_document(message: types.Message):
    '''
    —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    –ú–µ–Ω—è–µ—Ç –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏—Å—Ö–æ–¥—è –∏–∑ –µ–≥–æ —Ç–∏–ø–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–∞, —Ü–µ–Ω—ã –∏ –¥–∞—Ç—ã
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞ –¥–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä 
    '''
    
    user_id = str(message.from_user.id)
    state_data = dp.workflow_data.get(user_id, {})

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if message.document:
        file_id = message.document.file_id
        orig_filename = message.document.file_name
    elif message.photo:
        # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–æ—Ç–æ
        orig_filename = f"photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    file_info = await bot.get_file(file_id)
    local_path = os.path.join(os.getcwd(), orig_filename)
    await bot.download_file(file_info.file_path, destination=local_path)

    short_category = state_data.get("short_category", "–ë–µ–∑–ö–∞—Ç")
    short_item = state_data.get("short_item", "–ë–µ–∑–°—Ç–∞—Ç")
    typedoc = state_data.get("typedoc", "–î–æ–∫")
    summ = state_data.get("summ", "0")
    date = state_data.get("date", datetime.now().strftime("%d-%m-%y"))

    base_name = f"{short_category}_{short_item}_{typedoc}_{summ}_{date}"
    ext = os.path.splitext(orig_filename)[1]

    #–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —à–∞–±–ª–æ–Ω–∞
    current_template = get_user_template(user_id)
    if not current_template:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω.")
        return

    savedir_name = get_savedir(user_id)
    template_docs_folder = posixpath.join(REPORT_FOLDER, savedir_name)
    filename = get_unique_filename(template_docs_folder, base_name + ext)
    file_path_on_disk = posixpath.join(template_docs_folder, filename)

    try:
        yadisk_client.mkdir(template_docs_folder, parents=True)
    except yadisk.exceptions.PathExistsError:
        pass

    yadisk_client.upload(local_path, file_path_on_disk)

    try:
        yadisk_client.publish(file_path_on_disk)
    except yadisk.exceptions.PathAlreadyPublicError:
        pass
    
    # —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    public_url = await create_file_public_url(file_path_on_disk)
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª '{filename}' –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é '{template_docs_folder}'")

    await message.answer(
        f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ {filename}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: {public_url}"
    )
    dp.workflow_data.pop(user_id, None)
    await cmd_start(message)
    
    # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(local_path)
        logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {local_path} —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {local_path}: {e}")


# --- –°–õ–û–í–ê–†–¨ –¢–ò–ü–û–í –î–û–ö–£–ú–ï–ù–¢–û–í ---
d_typedoc = {
    "–ö–∞—Å—Å–æ–≤—ã–π —á–µ–∫": "–ß–µ–∫", "–í–µ–¥–æ–º–æ—Å—Ç—å –Ω–∞ –≤—Ä—É—á–µ–Ω–∏–µ": "–í–í—Ä—É—á", "–ê–∫—Ç": "–ê–∫—Ç",
    "–¢–æ–≤–∞—Ä–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è": "–¢–ù–∞–∫–ª", "–î–æ–≥–æ–≤–æ—Ä": "–î–≥–≤—Ä", "–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –¢–∞–ª–æ–Ω": "–ì–∞—Ä–∞–Ω—Ç", "–î–æ–∫—É–º–µ–Ω—Ç": "–î–æ–∫"
}


# --- –•–≠–ù–î–õ–ï–†–´ ---
@dp.message(CommandStart())
@require_authorization
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    print(f"\U0001F511 USER ID: {user_id}")

    if not is_authorized(message.from_user.id):
        await message.answer(f"–í–∞—à Telegram ID: {user_id}")
        await message.answer("\u274C –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω")],
            [KeyboardButton(text="üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω")],
            [KeyboardButton(text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")],
        ], resize_keyboard=True
    )
    await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.message(F.text == "‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω")
@require_authorization
async def handle_create_template_name(message: types.Message):
    user_id = str(message.from_user.id)
    logger.info(f"{user_id} —Å–æ–∑–¥–∞—ë—Ç —à–∞–±–ª–æ–Ω")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:")
    dp.workflow_data[str(user_id)] = {"state": "awaiting_template_name"}

@dp.message(F.text == "üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω")
@require_authorization
async def handle_choose_template(message: types.Message):
    user_id = str(message.from_user.id)
    templates = get_template_names()
    if not templates:
        await message.answer("‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    kb = build_reply_keyboard(templates)
    dp.workflow_data[user_id] = {"state": "awaiting_template_choice"}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", reply_markup=kb)

@dp.message(F.text == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
@require_authorization
async def handle_upload_file_prompt(message: types.Message):
    user_id = str(message.from_user.id)
    current_template = get_user_template(user_id)
    if not current_template:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã 'üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω'")
        return
    df = get_template_dataframe(current_template)
    categories = df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].dropna().unique().tolist()
    kb = build_reply_keyboard(categories)
    dp.workflow_data[str(message.from_user.id)] = {
        "state": "awaiting_category",
        "df": df.to_dict()
    }
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.message(F.text)
@require_authorization
async def handle_text_inputs(message: types.Message):
    user_id = str(message.from_user.id)
    text = message.text.strip()
    state_data = dp.workflow_data.get(user_id, {})
    state = state_data.get("state")

    if text == "üîô –ù–∞–∑–∞–¥":
        dp.workflow_data.pop(user_id, None)
        await cmd_start(message)
        return

    if state == "awaiting_template_name":
        template_name = text
        existing = get_template_names()
        if f"{template_name}.xlsx" in existing:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
            return
        dp.workflow_data[user_id] = {
            "state": "awaiting_template_file",
            "template_name": template_name
        }
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω Excel-—Ñ–∞–π–ª–æ–º (.xlsx), —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã.")

    elif state == "awaiting_template_choice":
        template_name = text
        existing = get_template_names()
        if template_name not in existing:
            await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        set_user_template(user_id, template_name)
        ensure_local_template(template_name)
        await message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' –≤—ã–±—Ä–∞–Ω.")
        dp.workflow_data.pop(user_id, None)
        await cmd_start(message)

    elif state == "awaiting_category":
        df = pd.DataFrame(state_data["df"])
        if text not in df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].values:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        articles = df[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == text]["–°—Ç–∞—Ç—å—è –†–∞—Å—Ö–æ–¥–æ–≤"].dropna().unique().tolist()
        dp.workflow_data[user_id]["category"] = text
        dp.workflow_data[user_id]["state"] = "awaiting_item"
        dp.workflow_data[user_id]["df"] = df.to_dict()
        kb = build_reply_keyboard(articles)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–æ–≤:", reply_markup=kb)

    elif state == "awaiting_item":
        df = pd.DataFrame(state_data["df"])
        category = state_data.get("category")
        valid_rows = df[(df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category) & (df["–°—Ç–∞—Ç—å—è –†–∞—Å—Ö–æ–¥–æ–≤"] == text)]
        if valid_rows.empty:
            valid_rows = df[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category]
            row = valid_rows.iloc[0]
            dp.workflow_data[user_id].update({
                "state": "awaiting_typedoc",
                "short_category": row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è_Short"],
                "short_item": text[:6]
            })
        else:
            row = valid_rows.iloc[0]
            dp.workflow_data[user_id].update({
                "state": "awaiting_typedoc",
                "short_category": row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è_Short"],
                "short_item": row["–°—Ç–∞—Ç—å—è –†–∞—Å—Ö–æ–¥–æ–≤_Short"]
            })
            
        typedoc_options = list(d_typedoc.keys())
        kb = build_reply_keyboard(typedoc_options)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", reply_markup=kb)
        
    elif state == "awaiting_typedoc":
        typedoc = d_typedoc.get(message.text, message.text[:6])
        dp.workflow_data[user_id]["typedoc"] = typedoc
        dp.workflow_data[user_id]["state"] = "awaiting_sum"
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:")

    elif state == "awaiting_sum":
        if not re.match(r"^\d+(\.\d{1,2})?$", message.text):
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π).")
            return
        dp.workflow_data[user_id]["summ"] = message.text
        dp.workflow_data[user_id]["state"] = "awaiting_date_choice"
        kb = build_reply_keyboard(["–°–µ–≥–æ–¥–Ω—è", "–°–≤–æ—è –¥–∞—Ç–∞"])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

    elif state == "awaiting_date_choice":
        if message.text == "–°–µ–≥–æ–¥–Ω—è":
            dp.workflow_data[user_id]["date"] = datetime.now().strftime("%d-%m-%y")
            dp.workflow_data[user_id]["state"] = "uploading_file"
            await message.answer("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª. –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—ë, –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç", reply_markup=ReplyKeyboardRemove())
        elif message.text == "–°–≤–æ—è –¥–∞—Ç–∞":
            dp.workflow_data[user_id]["state"] = "awaiting_custom_date"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì:")
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–°–≤–æ—è –¥–∞—Ç–∞'")


    elif state == "awaiting_custom_date":
        try:
            datetime.strptime(message.text, "%d-%m-%y")
            dp.workflow_data[user_id]["date"] = message.text
            dp.workflow_data[user_id]["state"] = "uploading_file"
            await message.answer("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª. –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—ë, –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç", reply_markup=ReplyKeyboardRemove())
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì")
            return

@dp.message(F.document)
@require_authorization
async def handle_document_upload(message: types.Message):
    user_id = str(message.from_user.id)
    state_data = dp.workflow_data.get(user_id, {})
    state = state_data.get("state")

    document = message.document
    if not document:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    file_info = await bot.get_file(document.file_id)
    local_path = os.path.join(os.getcwd(), document.file_name)
    await bot.download_file(file_info.file_path, destination=local_path)

    if state == "awaiting_template_file":
        if not document.file_name.endswith(".xlsx"):
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .xlsx-—Ñ–∞–π–ª—ã.")
            return

        try:
            df = pd.read_excel(local_path)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ Excel.")
            return

        required_cols = {"–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—Ç–∞—Ç—å—è –†–∞—Å—Ö–æ–¥–æ–≤", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è_Short", "–°—Ç–∞—Ç—å—è –†–∞—Å—Ö–æ–¥–æ–≤_Short"}
        if not required_cols.issubset(set(df.columns)):
            await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã: " + ", ".join(required_cols))
            return

        template_name = state_data["template_name"]
        disk_path = posixpath.join(TEMPLATES_FOLDER, f"{template_name}.xlsx")

        try:
            yadisk_client.upload(local_path, disk_path, overwrite=True)
            logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø.–î–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
            return
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        savedir_name = get_savedir(user_id)
        template_docs_folder = posixpath.join(REPORT_FOLDER, savedir_name)
        try:
            yadisk_client.mkdir(template_docs_folder, parents=True)
            logger.info(f"–ü–∞–ø–∫–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —à–∞–±–ª–æ–Ω–∞ '{template_name}' —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –Ø.–î–∏—Å–∫–µ")
        except yadisk.exceptions.PathExistsError:
            logger.info(f"–ü–∞–ø–∫–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —à–∞–±–ª–æ–Ω–∞ '{template_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –Ø.–î–∏—Å–∫–µ")
            
        dp.workflow_data.pop(user_id, None)
        await cmd_start(message)

    elif state == "uploading_file":
        await processing_document(message)
    else:
        await message.answer("‚ùå –°–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")

@dp.message(F.photo)
@require_authorization
async def handle_photo_upload(message: types.Message):
    user_id = str(message.from_user.id)
    state_data = dp.workflow_data.get(user_id, {})
    state = state_data.get("state")
    if state == "uploading_file":
        await processing_document(message)
    else:
        await message.answer("‚ùå –°–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")

if __name__ == '__main__':
    import asyncio
    from aiogram import Router
    router = Router()
    dp.include_router(router)
    dp.workflow_data = {}
    asyncio.run(dp.start_polling(bot))
